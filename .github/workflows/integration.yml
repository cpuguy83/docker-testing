name: Integration
on:
  workflow_dispatch:
    inputs:
      testFilter:
        description: Run a subset of tests(TEST_FILTER)
        default: ''
        required: false
      osLinux:
        required: false
        description: OS to run linux tests on
        default: ubuntu-18.04
      osWindows:
        required: false
        description: OS to run windows tests on
        default: windows-2019
      runcVersion:
        description: Only run matrix with a specific runc version
        required: false
        default: "1.0"
      containerdVersion:
        description: Only run matrix with a specific containerd version
        required: false
        default: "1.5"
      engineVersion:
        description: Only run matrix with a specific engine version
        required: false
        default: "20.10"
      cliVersion:
        description: Only run matrix with a specific cli version
        required: false
        default: "20.10"
      graphDriver:
        description: Set the graph driver for the test daemon to use
        required: false
        default: overlay2

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    name: Generate Integration Matrix
    outputs:
      integration-matrix-linux: ${{ steps.set-matrix.outputs.integration-linux }}
      integration-cli-matrix-linux: ${{ steps.set-matrix.outputs.integration-cli-linux }}
      integration-matrix-windows: ${{ steps.set-matrix.outputs.integration-windows }}
      integration-cli-matrix-windows: ${{ steps.set-matrix.outputs.integration-cli-windows }}
      windows-2019-image: ${{ steps.set-matrix.outputs.windows-2019-image }}
      windows-2019-tag: ${{ steps.set-matrix.outputs.windows-2019-tag }}
    steps:
    - uses: actions/checkout@v2
    - id: set-matrix
      env:
        ENGINE_VERSION: "${{ github.event.inputs.engineVersion }}"
        CONTAINERD_VERSION: "${{ github.event.inputs.containerdVersion }}"
        RUNC_VERSION: "${{ github.event.inputs.runcVersion }}"
        CLI_VERSION: "${{ github.event.inputs.cliVersion }}"
        OS_VERSION_LINUX: "${{ github.event.inputs.osLinux }}"
        OS_VERSION_WINDOWS: "${{ github.event.inputs.osWindows }}"
      run: |
        set -e
        matrix="$(./matrix.sh integration-linux)"
        jq . <<<"$matrix" # help debug
        echo "::set-output name=integration-linux::$matrix"

        matrix="$(./matrix.sh integration-windows)"
        jq . <<<"$matrix" # help debug
        echo "::set-output name=integration-windows::$matrix"

        matrix="$(./matrix.sh integration-cli-linux)"
        jq . <<<"$matrix" # help debug
        echo "::set-output name=integration-cli-linux::$matrix"

        matrix="$(./matrix.sh integration-cli-windows)"
        jq . <<<"$matrix" # help debug
        echo "::set-output name=integration-cli-windows::$matrix"

        case "$OS_VERSION_WINDOWS" in
            "windows-2019")
                set -x
                echo "::set-output name=windows-2019-image::mcr.microsoft.com/windows/servercore"
                echo "::set-output name=windows-2019-tag::ltsc2019"
                ;;
            *)
                echo unknown windows version "$OS_VERSION_WINDOWS"
                ;;
        esac
  integration-windows:
    if: github.event.inputs.osWindows != 'skip'
    runs-on: ${{ matrix.os }}
    name: os=${{ matrix.os }} engine=${{ matrix.engine }} cli=${{ matrix.cli }}
    needs:
    - generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.integration-matrix-windows) }}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: moby/moby
        fetch-depth: 1
        path: out/src/github.com/docker/docker
        ref: "${{ github.event.inputs.engineVersion }}"
    - name: Test
      timeout-minutes: 120
      env:
        TEST_FILTER: ${{ github.event.inputs.testFilter }}
        TEST_SKIP_INTEGRATION_CLI: "1"
        SOURCES_DRIVE: 'd'
        SOURCES_SUBDIR: a\docker-testing\docker-testing\out
        TESTRUN_DRIVE: 'd'
        TESTRUN_SUBDIR: 'CI'
        WINDOWS_BASE_IMAGE: ${{ needs.generate-matrix.outputs.windows-2019-image }}
        WINDOWS_BASE_IMAGE_TAG: ${{ needs.generate-matrix.outputs.windows-2019-tag }}
        SKIP_UNIT_TESTS: '1'
        SKIP_VALIDATION_TESTS: '1'
        SKIP_ALL_CLEANUP: '1'
      working-directory: out/src/github.com/docker/docker
      run: |
        $ErrorActionPreference = 'Stop'
        Invoke-WebRequest https://github.com/moby/docker-ci-zap/blob/master/docker-ci-zap.exe?raw=true -OutFile C:/Windows/System32/docker-ci-zap.exe
        ./hack/ci/windows.ps1
  integration-linux:
    if: github.event.inputs.osLinux != 'skip'
    runs-on: ${{ matrix.os }}
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.integration-matrix-linux) }}
    name: os=${{ matrix.os }} engine=${{ matrix.engine }} containerd=${{ matrix.containerd }} cli=${{ matrix.cli }} runc=${{ matrix.runc }} ${{matrix.suite}}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: moby/moby
        fetch-depth: 1
        path: engine-src
        ref: "${{ github.event.inputs.engineVersion }}"
    - uses: actions/checkout@v2
      with:
        repository: docker/cli
        fetch-depth: 1
        path: cli-src
        ref: "${{ github.event.inputs.cliVersion }}"
    - uses: actions/checkout@v2
      with:
        repository: opencontainers/runc
        fetch-depth: 1
        path: runc-src
        ref: master # For now, always master, there is no release branch
    - uses: actions/checkout@v2
      with:
        repository: containerd/containerd
        fetch-depth: 1
        path: containerd-src
        ref: release/${{ github.event.inputs.containerdVersion }}
    - name: Login to GHCR
      run: echo ${{ secrets.CR_PAT }} | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Build all the things
      env:
        DISTRO: ${{matrix.os}}
        ENGINE_VERSION: ${{matrix.engine}}
        CLI_VERSION: ${{matrix.cli}}
        RUNC_VERSION: ${{matrix.runc}}
        CONTAINERD_VERSION: ${{matrix.containerd}}
        APT_MIRROR: http://azure.archive.ubuntu.com/ubuntu
      run: |
        set -e -x

        engine_tag="engine-$(echo ${{matrix.os}}${{matrix.engine}} | sha256sum | awk '{{ print $1 }}')"
        cli_tag="cli-$(echo ${{matrix.os}}${{matrix.cli}} | sha256sum | awk '{{ print $1 }}')"
        containerd_tag="containerd-$(echo ${{matrix.os}}${{matrix.containerd}} | sha256sum | awk '{{ print $1 }}')"
        runc_tag="runc-$(echo ${{matrix.os}}${{matrix.runc}} | sha256sum | awk '{{ print $1 }}')"

        export ENGINE_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${engine_tag}"
        export CLI_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${cli_tag}"
        export CONTAINERD_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${containerd_tag}"
        export RUNC_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${runc_tag}"

        if [ -z "CLI_VERSION" ]; then
          # Tests need the CLI even though we will not be using the CLI suite here
          export CLI_VERSION="20.10"
        fi

        export ENGINE_COMMIT="$(git -C ./engine-src rev-parse HEAD)"
        export CLI_COMMIT="$(git -C ./cli-src rev-parse HEAD)"
        export RUNC_COMMIT="$(git -C ./runc-src rev-parse HEAD)"
        export CONTAINERD_COMMIT="$(git -C ./containerd-src rev-parse HEAD)"

        make -j 4 engine containerd runc cli
    - name: Test
      timeout-minutes: 120
      env:
        DOCKER_INTEGRATION_TESTS_VERIFIED: true
        APT_MIRROR: http://azure.archive.ubuntu.com/ubuntu
        CACHE_FROM: ghcr.io/${{github.repository}}/${{matrix.os}}:latest
        TEST_FILTER: ${{ github.event.inputs.testFilter }}
        TEST_SKIP_INTEGRATION_CLI: "1"
        DOCKER_GRAPHDRIVER: ${{ github.event.inputs.graphDriver }}
      run:  make test DISTRO=${{matrix.os}}
    - name: Cleanup
      if: always()
      run: |
          mounts=("$(mount | grep 'docker/docker/bundles' | awk '{ print $3 }')")
          for i in ${mounts[@]}; do
            sudo umount -r -l "${i}"
          done
          for i in out/tests/test-integration/*; do
            [ -d "${i}" ] || continue
            find  "${i}" -maxdepth 3 -name root | sudo xargs -I thefile rm -rf thefile
          done
          sudo chown -R "$(id -u):$(id -g)" "out/tests"
    - name: Generate artifact name
      id: generate-artifact-name
      if: always()
      run: |
        echo "::set-output name=name::os=${{ matrix.os }} engine=${{ matrix.engine }} containerd=${{ matrix.containerd }} cli=${{ matrix.cli }} runc=${{ matrix.runc }} integration"
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ${{ steps.generate-artifact-name.outputs.name }}
        path: |
          out/tests/**
          !out/tests/test-integration/**/root
          !out/tests/test-integration/**/*.sock
          !out/tests/test-integration/*/*.sock
        retention-days: 10
  integration-cli-linux:
    if: github.event.inputs.osLinux != 'skip'
    timeout-minutes: 120
    runs-on: ${{ matrix.os }}
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.generate-matrix.outputs.integration-cli-matrix-linux) }}
    name: os=${{ matrix.os }} engine=${{ matrix.engine }} containerd=${{ matrix.containerd }} cli=${{ matrix.cli }} runc=${{ matrix.runc }} cli-${{matrix.suite}}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: moby/moby
        fetch-depth: 1
        path: engine-src
        ref: "${{ github.event.inputs.engineVersion }}"
    - uses: actions/checkout@v2
      with:
        repository: docker/cli
        fetch-depth: 1
        path: cli-src
        ref: "${{ github.event.inputs.cliVersion }}"
    - uses: actions/checkout@v2
      with:
        repository: opencontainers/runc
        fetch-depth: 1
        path: runc-src
        ref: master # For now, always master, there is no release branch
    - uses: actions/checkout@v2
      with:
        repository: containerd/containerd
        fetch-depth: 1
        path: containerd-src
        ref: release/${{ github.event.inputs.containerdVersion }}
    - name: Login to GHCR
      run: echo ${{ secrets.CR_PAT }} | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Build all the things
      env:
        DISTRO: ${{matrix.os}}
        ENGINE_VERSION: ${{matrix.engine}}
        CLI_VERSION: ${{matrix.cli}}
        RUNC_VERSION: ${{matrix.runc}}
        CONTAINERD_VERSION: ${{matrix.containerd}}
      run: |
        set -e -x

        engine_tag="engine-$(echo ${{matrix.os}}${{matrix.engine}} | sha256sum | awk '{{ print $1 }}')"
        cli_tag="cli-$(echo ${{matrix.os}}${{matrix.cli}} | sha256sum | awk '{{ print $1 }}')"
        containerd_tag="containerd-$(echo ${{matrix.os}}${{matrix.containerd}} | sha256sum | awk '{{ print $1 }}')"
        runc_tag="runc-$(echo ${{matrix.os}}${{matrix.runc}} | sha256sum | awk '{{ print $1 }}')"

        export ENGINE_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${engine_tag}"
        export CLI_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${cli_tag}"
        export CONTAINERD_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${containerd_tag}"
        export RUNC_CACHE_FROM="ghcr.io/${{ github.repository }}/cache:${runc_tag}"

        if [ -z "CLI_VERSION" ]; then
          export CLI_VERSION="20.10"
        fi

        export ENGINE_COMMIT="$(git -C ./engine-src rev-parse HEAD)"
        export CLI_COMMIT="$(git -C ./cli-src rev-parse HEAD)"
        export RUNC_COMMIT="$(git -C ./runc-src rev-parse HEAD)"
        export CONTAINERD_COMMIT="$(git -C ./containerd-src rev-parse HEAD)"

        make -j 4 engine containerd runc cli
    - name: Test
      timeout-minutes: 120
      env:
        DOCKER_INTEGRATION_TESTS_VERIFIED: true
        APT_MIRROR: http://azure.archive.ubuntu.com/ubuntu
        CACHE_FROM: ghcr.io/${{github.repository}}/${{matrix.os}}:latest
        TEST_FILTER: ${{ github.event.inputs.testFilter }}
        TEST_SKIP_INTEGRATION: "1"
        DOCKER_GRAPHDRIVER: ${{ github.event.inputs.graphDriver }}
      run: make test DISTRO=${{matrix.os}} TESTFLAGS="-test.run Test(${{matrix.suite}})"
    # Cleanup step can be needed if there was a problem with the run and the cleanup within the test setup code does not run
    - name: Cleanup
      if: always()
      run: |
          mounts=("$(mount | grep 'docker/docker/bundles' | awk '{ print $3 }')")
          for i in ${mounts[@]}; do
            sudo umount -r -l "${i}"
          done
          for i in out/tests/test-integration/*; do
            [ -d "${i}" ] || continue
            find  "${i}" -maxdepth 3 -name root | sudo xargs -I thefile rm -rf thefile
          done
          sudo chown -R "$(id -u):$(id -g)" "out/tests"
    - name: Generate artifact name
      id: generate-artifact-name
      if: always()
      run: |
        echo "::set-output name=name::os=${{ matrix.os }} engine=${{ matrix.engine }} containerd=${{ matrix.containerd }} cli=${{ matrix.cli }} runc=${{ matrix.runc }} $(echo '${{matrix.suite}}' | sed 's,|,_,g')"
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ${{ steps.generate-artifact-name.outputs.name }}
        path: |
          out/tests/**
          !out/tests/test-integration/**/root
          !out/tests/test-integration/**/*.sock
          !out/tests/test-integration/*/*.sock
        retention-days: 10
  publish:
    runs-on: ubuntu-20.04
    name: Publish Results
    needs: ["integration-linux", "integration-cli-linux", "integration-windows"]
    if: always()
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: artifacts/**/*.xml
        check_name: Test Results